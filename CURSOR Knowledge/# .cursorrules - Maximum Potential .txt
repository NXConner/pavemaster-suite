# .cursorrules - Maximum Potential Configuration for Pavement Performance Suite

# Project Identity & Business Context
projectName: Pavement Performance Suite [cite: 59]
description: AI-assisted development for pavement analysis and performance tracking, specifically optimized for asphalt paving and sealing, with a strategic focus on church parking lot repair, sealcoating, and line-striping (including layout reconfiguration for maximizing parking spaces). [cite: 59]

# AI Behavior & Role
aiRole: Expert-level, product-minded AI Software Architect and Lead Developer 
aiGoal: Bring this project to a robust, production-ready state, realizing its full potential by analyzing the codebase, devising a comprehensive completion and enhancement strategy, and executing it with clean, maintainable, secure, and highly efficient code. Think creatively to maximize every feature, ensuring the application is robust, scalable, observable, and user-centric. [cite: 2, 3, 4]
aiBehavior:
  autoFix: true [cite: 60]
  autoCreateMissing: true [cite: 60]
  refactorForPerformance: true [cite: 60]
  documentChanges: true [cite: 60]
  preferModularCode: true [cite: 60]
  useTypeHints: true [cite: 60]
  exhaustiveAndComprehensive: true # Include all relevant recommendations, best practices, and considerations.
  anticipateFollowUpQuestions: true # Address any follow-up questions or related topics proactively.
  noFurtherClarificationNeeded: true # Make reasonable assumptions where necessary.
  presentSingleCompleteResponse: true # Output in a single, complete response per phase.
  listAndCompareApproaches: true # List and compare multiple approaches/options where applicable.

# Guiding Principles for Development & Operations (Expanded from prompt)
guidingPrinciples:
  - SurgicalPrecision: When modifying an existing file, only edit the specific function, class, or code block that requires changes. Never rewrite entire files unless absolutely necessary.
  - Atomicity: Each task must be performed completely and committed separately before moving to the next. [cite: 6]
  - Idempotency: All scripts (especially for databases and setup) must be safely re-runnable without causing errors or duplications. [cite: 7]
  - Automation: Prioritize scripts and configuration to automate setup, testing, deployment, and rollback. [cite: 8]
  - UserCentricDesign: The final application must be intuitive, accessible (a11y), internationalized (i18n/l10n), and provide an excellent user experience across devices, with a focus on ease of use for church administrators and field crews. [cite: 9]
  - Observability: Integrate structured logging, metrics, and tracing for easy monitoring and debugging in production. [cite: 10]
  - DeveloperExperience (DevEx): The project should be simple to set up, understand, and contribute to. Include onboarding docs, code comments, and a quickstart guide. [cite: 11]
  - SecurityByDesign: Security is a primary concern, integrated into every phase from the start. No secrets in code; use environment variables or secret managers. [cite: 12]
  - Compliance: If relevant, address compliance standards (e.g., GDPR, SOC2, or specific VA contractor board requirements) and document how they are met.
  - Testing: Require high test coverage (80%+), realistic test data, and both automated and manual accessibility testing.
  - Documentation: All documentation must include versioning, changelogs, and clear contribution guidelines.
  - Flexibility: Use feature flags, plugin architecture, and environment-specific configs for extensibility and multi-environment support.
  - ErrorHandling: All scripts and the application must provide clear, actionable error messages and exit codes.
  - RollbackAndDisasterRecovery: For migrations and deployments, provide rollback and disaster recovery instructions.
  - DataPrivacy: Document data retention, deletion, and privacy policies, especially for client data (e.g., church contacts).

# Coding Standards & Quality
codingStandards:
  language: Python [cite: 60]
  styleGuide: PEP8 [cite: 60]
  formattingTool: black [cite: 60]
  lintingTool: flake8 [cite: 60]
  testingFramework: pytest [cite: 60]
  typeHinting: true # Explicitly ensure type hints are used throughout.
  codeQualityTooling: # Detailed from prompt Phase 2 [cite: 24]
    - eslintrc.json # For frontend (if applicable)
    - prettierrc # For frontend (if applicable)
    - pyproject.toml # For Python project setup
  gitHooks:
    tool: Husky # Or Lefthook [cite: 25]
    preCommit: [linters, formatters] # Run automatically before commits [cite: 25]

# File Structure (Expanded from prompt)
fileStructure:
  backend: /src [cite: 60]
  frontend: /src/client # Assuming a separate frontend directory
  tests: /tests [cite: 60]
  data: /data [cite: 60]
  notebooks: /notebooks [cite: 60]
  components: /src/client/components # For reusable UI components [cite: 31]
  migrations: /supabase/migrations # For database schema changes [cite: 33]
  githubTemplates: /.github # For Issue & PR Templates, CI/CD workflows [cite: 26, 53]
  scripts: /scripts # For general utility scripts (e.g., install_dependencies, generate-openapi)
  docs: /docs # For detailed documentation beyond README

# Documentation Standards
documentation:
  format: markdown [cite: 60]
  updateReadme: true [cite: 60]
  inlineComments: true [cite: 60]
  versioning: true # Include versioning for all documentation.
  changelogs: true # Include changelogs for all documentation.
  contributionGuidelines: true # Include clear contribution guidelines.
  apiSpec: OpenAPI/Swagger # For backend API documentation [cite: 48]

# Testing Standards
testing:
  coverageThreshold: 85 # Adjusted from 80%+ to 85% for maximization [cite: 60]
  autoGenerateTests: true [cite: 60]
  testTypes: [unit, integration, e2e, accessibility, load] # Expanded to include E2E, accessibility, and load tests. [cite: 43, 45, 46]
  realisticTestData: true # Require realistic test data [cite: 35]
  manualAccessibilityTesting: true # Require both automated and manual accessibility testing.
  loadTestingTools: [k6, Artillery] # Specific tools for load testing [cite: 46]

# Deployment & CI/CD
deployment:
  strategy: GitHub Actions [cite: 60] # Or similar CI/CD (GitLab CI, CircleCI)
  autoDeployOnMain: true [cite: 60] # Auto-deploy on successful main branch merge.
  environment: production # Focus on production environment readiness [cite: 60]
  containerization:
    dockerfile: multi-stage # Optimized production image [cite: 27]
    dockerCompose: true # Orchestrates all services locally [cite: 28]
    dockerignore: true # Excludes unnecessary build context files [cite: 29]
  secretsManagement:
    tool: [Doppler, HashiCorp Vault, AWS Secrets Manager] # Placeholder for production-grade secrets manager [cite: 38]
  ciCdPipelineSteps: # Automated steps in CI/CD pipeline [cite: 53, 54, 55]
    - Build and push Docker images
    - Run linters and tests (unit, integration, E2E)
    - Static Application Security Testing (SAST) with CodeQL [cite: 54]
    - Dependency vulnerability scans [cite: 54]
    - Database migrations against staging/production [cite: 55]
  rollbackInstructions: true # Provide rollback instructions for deployments.
  disasterRecoveryInstructions: true # Provide disaster recovery instructions for deployments.

# Database Specifics
database:
  platform: Supabase (PostgreSQL)
  migrationTool: [node-pg-migrate, Alembic] # Use a proper migration tool [cite: 33]
  rowLevelSecurity (RLS): mandatory # Must include RLS policies [cite: 34]
  rolesAndUserRolesTables: true # Include creation of roles and user_roles tables [cite: 34]
  dataSeedingScript: seed.ts # Or seed.py, uses app's DB client with realistic data [cite: 35]
  adminUserCreation: n8ter8@gmail.com # Secure instructions for creating this admin user [cite: 36]
  adminRoleAssignment: super_admin # Seed script assigns this role [cite: 37]

# Frontend/UI Specifics
frontend:
  designSystem: true # Define primary/secondary colors, typography, spacing [cite: 30]
  componentLibrary: true # Core, reusable UI components [cite: 31]
  accessibilityLinter: eslint-plugin-jsx-a11y # Integrated into code quality tooling [cite: 32]
  internationalization (i18n/l10n): true # Scaffold support for UI text.
  mobileResponsiveness: true # Ensure all UI is responsive across devices.
  progressiveWebApp (PWA): true # Consider offline/PWA capabilities for field employees.

# Execution Plan (Phased Approach - from prompt)
executionPlan:
  phases:
    - Phase 1: Analysis & Strategic Roadmap [cite: 14]
      subTasks:
        - Project Summary [cite: 15]
        - Improvement & Completion Plan (prioritized list) [cite: 16]
          - Feature Maximization [cite: 17]
          - New Features (high-value, church-focused) [cite: 18]
          - Refactoring, Bug Fixes, Optimizations [cite: 19]
        - Phased Implementation Roadmap (Markdown table) [cite: 20]
    - Phase 2: Project Initialization & DevEx Tooling [cite: 21]
      subTasks:
        - Environment Configuration (.env.example) [cite: 22]
        - Dependency Management (install_dependencies.sh/.bat) [cite: 23]
        - Code Quality Tooling (configs) [cite: 24]
        - Git Hooks (pre-commit) [cite: 25]
        - Issue & PR Templates (.github) [cite: 26]
        - Branching Strategy (recommend & document)
        - Onboarding (Quickstart in README)
    - Phase 3: Containerization (Docker Setup) [cite: 27]
      subTasks:
        - Dockerfile (multi-stage) [cite: 27]
        - Docker Compose (local orchestration) [cite: 28]
        - .dockerignore [cite: 29]
    - Phase 4: UI/UX Foundation & Component Library [cite: 30]
      subTasks:
        - Design System File [cite: 30]
        - Core Reusable UI Components [cite: 31]
        - Accessibility (a11y) Linting Integration [cite: 32]
        - Internationalization (i18n/l10n) scaffolding
        - Mobile Responsiveness assurance
    - Phase 5: Supabase Schema & Database Migrations [cite: 33]
      subTasks:
        - Migration Tool Setup [cite: 33]
        - Initial Migration (tables, columns, RLS, roles) [cite: 34]
        - Data Seeding Script (realistic data) [cite: 35]
        - Admin User Creation Instructions [cite: 36]
        - Idempotency for migrations/seeds
        - Rollback plans for migrations
    - Phase 6: Security Hardening & Configuration [cite: 38]
      subTasks:
        - Secrets Management (placeholder for production-grade) [cite: 38]
        - Dependency Vulnerability Scanning (npm audit/snyk) [cite: 39]
        - Compliance documentation
    - Phase 7: Iterative Development Sprints [cite: 40]
      subTasks: (For each roadmap task)
        - Implement (fully enhanced, feature flags, structured logging) [cite: 41, 42]
        - Test (Unit & Integration) [cite: 43]
        - Test (End-to-End) [cite: 44]
        - Lint & Format [cite: 45]
        - Atomic Commits (descriptive messages)
        - Code Review (with checklist)
    - Phase 8: Performance & Load Testing [cite: 46]
      subTasks:
        - Script Generation (k6/Artillery) [cite: 46]
        - Execution Instructions (README) [cite: 47]
    - Phase 9: API Documentation Generation [cite: 48]
      subTasks:
        - OpenAPI/Swagger Specification annotations [cite: 48]
        - Generation Script (swagger.json) [cite: 49]
        - API Examples for each endpoint
    - Phase 10: Project & Contributor Documentation [cite: 50]
      subTasks:
        - README.md (comprehensive) [cite: 50]
        - LICENSE (MIT default)
        - CONTRIBUTING.md (guide) [cite: 51]
        - CODEOWNERS [cite: 52]
        - CHANGELOG.md
    - Phase 11: Deployment, Security & Observability Pipeline [cite: 53]
      subTasks:
        - CI/CD Config (.github/workflows/main.yml) [cite: 53]
          - Build/push Docker images
          - Run linters/tests (unit, integration, E2E) [cite: 53]
          - SAST (CodeQL) [cite: 54]
          - Dependency vulnerability scans [cite: 54]
          - Database migrations (staging/prod) [cite: 55]
        - Observability Integration (metrics, logging, tracing)
        - Rollback and Disaster Recovery Instructions
    - Phase 12: Final Handover Package [cite: 56]
      subTasks:
        - Summary Report (files created/modified) [cite: 56]
        - Confirmation of scripts/configs [cite: 56]
        - First-Time Contributor Guide [cite: 57]
        - Deployment Checklist [cite: 57]
        - Known Limitations
        - Potential Future Improvements
    - Phase 13: Project Retrospective (Meta Phase) # Added as per comprehensive strategy
      subTasks:
        - Summarize lessons learned
        - What went well/could be improved
        - Open questions for future maintainers

# Notes & Special Considerations
notes:
  - Always validate pavement metrics against historical benchmarks. [cite: 61]
  - Prioritize performance and maintainability in all modules. [cite: 61]
  - **Church Parking Lot Focus:** Tailor features (quoting, scheduling, project management) to explicitly address the unique needs of churches: visual quoting with layout mockups, minimal disruption scheduling, specific communication protocols, and tailored reporting.
  - **Virginia Contractor Licensing:** Remember the user's context regarding their Virginia Board of Contractors Class C license specialty designation in PAV and the PSI exams. Ensure any project-related documentation or features implicitly support or acknowledge compliance with relevant contractor regulations if applicable (e.g., proper invoicing, record-keeping).
  - **Small Business Context:** Acknowledge 2 full-time, 1 part-time employees. Solutions should be practical, cost-effective, and impactful for a small team. Automation is key to leverage limited human resources.

