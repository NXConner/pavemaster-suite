name: 'PaveMaster Suite - Enterprise Deployment Pipeline'

on:
  push:
    branches: [main, develop, staging]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # Daily security scans

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'pavemaster-suite'

jobs:
  # Security and Quality Checks
  security-audit:
    name: 'Security Audit & Vulnerability Scan'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: |
          npm audit --audit-level=high
          npx audit-ci --config ./audit-ci.json
      
      - name: Run SAST scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_CSS: true
          VALIDATE_DOCKERFILE: true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Code Quality & Testing
  quality-testing:
    name: 'Quality Assurance & Testing'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, integration, e2e, accessibility, performance]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Type checking
        run: npm run type-check
      
      - name: Unit tests
        if: matrix.test-suite == 'unit'
        run: |
          npm run test:unit -- --coverage
          npx codecov
      
      - name: Integration tests
        if: matrix.test-suite == 'integration'
        run: npm run test:integration
      
      - name: E2E tests
        if: matrix.test-suite == 'e2e'
        run: |
          npm run build
          npm run test:e2e
      
      - name: Accessibility tests
        if: matrix.test-suite == 'accessibility'
        run: npm run test:a11y
      
      - name: Performance tests
        if: matrix.test-suite == 'performance'
        run: npm run test:performance
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            coverage/
            test-results/
            lighthouse-reports/

  # Build and Package
  build-application:
    name: 'Build & Package Application'
    runs-on: ubuntu-latest
    needs: [security-audit, quality-testing]
    outputs:
      build-version: ${{ steps.version.outputs.version }}
      build-hash: ${{ steps.hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate build version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA:0:7}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Build application
        run: |
          npm run build
          npm run analyze-bundle
        env:
          VITE_BUILD_VERSION: ${{ steps.version.outputs.version }}
          VITE_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
          VITE_COMMIT_SHA: ${{ github.sha }}
      
      - name: Generate build hash
        id: hash
        run: |
          BUILD_HASH=$(find dist -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ steps.version.outputs.version }}
          path: |
            dist/
            bundle-analysis/
          retention-days: 30

  # Docker Build & Registry
  docker-build:
    name: 'Docker Build & Registry Push'
    runs-on: ubuntu-latest
    needs: build-application
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ needs.build-application.outputs.build-version }}
          path: dist/
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.build-application.outputs.build-version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ needs.build-application.outputs.build-version }}
            BUILD_HASH=${{ needs.build-application.outputs.build-hash }}

  # Infrastructure as Code
  infrastructure-deploy:
    name: 'Infrastructure Deployment'
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        environment: [staging, production]
    environment: ${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy infrastructure with Terraform
        run: |
          cd infrastructure/terraform
          terraform init
          terraform plan -var="environment=${{ matrix.environment }}"
          terraform apply -auto-approve -var="environment=${{ matrix.environment }}"
      
      - name: Deploy to Kubernetes
        run: |
          aws eks update-kubeconfig --region us-east-1 --name pavemaster-${{ matrix.environment }}
          kubectl apply -f infrastructure/k8s/${{ matrix.environment }}/
          kubectl set image deployment/pavemaster-suite pavemaster-suite=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.build-application.outputs.build-version }}
          kubectl rollout status deployment/pavemaster-suite

  # Performance & Security Testing
  production-validation:
    name: 'Production Validation & Monitoring'
    runs-on: ubuntu-latest
    needs: infrastructure-deploy
    steps:
      - uses: actions/checkout@v4
      
      - name: Load testing
        run: |
          docker run --rm -v $PWD:/workspace \
            grafana/k6 run /workspace/tests/load/production-load-test.js
      
      - name: Security penetration testing
        run: |
          docker run --rm -v $PWD:/zap/wrk/:rw \
            -t owasp/zap2docker-stable zap-full-scan.py \
            -t https://app.pavemaster.com -r security-report.html
      
      - name: Lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://app.pavemaster.com
            https://app.pavemaster.com/dashboard
            https://app.pavemaster.com/analytics
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Deployment Notifications
  notification:
    name: 'Deployment Notifications'
    runs-on: ubuntu-latest
    needs: [production-validation]
    if: always()
    steps:
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
      
      - name: Teams notification
        if: failure()
        run: |
          curl -H "Content-Type: application/json" -d '{
            "text": "ðŸš¨ PaveMaster Suite deployment failed on ${{ github.ref }}",
            "sections": [{
              "activityTitle": "Deployment Failure",
              "activitySubtitle": "${{ github.repository }}",
              "facts": [
                {"name": "Branch", "value": "${{ github.ref }}"},
                {"name": "Commit", "value": "${{ github.sha }}"},
                {"name": "Author", "value": "${{ github.actor }}"}
              ]
            }]
          }' ${{ secrets.TEAMS_WEBHOOK }}