version: '3.8'

services:
  # Main Application Service
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: pavement-performance-suite
    ports:
      - "3000:3000"
    env_file:
      - .env.local
    depends_on:
      - postgres
      - redis
    networks:
      - pavemaster_network
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pavemaster-postgres
    environment:
      POSTGRES_DB: pavemasterdb
      POSTGRES_USER: pavemasteruser
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - pavemaster_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pavemasteruser -d pavemasterdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: pavemaster-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pavemaster_network
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Supabase Studio (Optional - for database management)
  supabase-studio:
    image: supabase/studio:latest
    container_name: pavemaster-supabase-studio
    ports:
      - "3001:3000"
    environment:
      SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      SUPABASE_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    networks:
      - pavemaster_network
    depends_on:
      - postgres
    restart: unless-stopped

  # Monitoring Service
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: pavemaster-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pavemaster_network
    restart: unless-stopped

  # Log Management
  grafana:
    image: grafana/grafana:9.5.3
    container_name: pavemaster-grafana
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - pavemaster_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  pavemaster_network:
    driver: bridge

# Performance and Security Configurations
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "200k"
    max-file: "10"

# Notes:
# 1. Ensure .env.local is properly configured
# 2. Run `docker-compose up --build` to start
# 3. Use `docker-compose down` to stop services